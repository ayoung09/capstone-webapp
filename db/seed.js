const db = require('APP/db');
const Promise = require('bluebird');

const seedUsers = () => db.Promise.map([
  {name: 'Picasso', email: 'artist@art.com'},
  {name: 'Mona Lisa', email: 'smile@art.com'}
], user => db.model('users').create(user));

const seedPhrases = () => db.Promise.map([
  {text: 'lazy turtle on a rock'},
  {text: 'monkey hurls strawberry ice cream'},
  {text: 'penguin waiter serves water'},
  {text: 'take a cold shower'},
  {text: 'write a bucket list'},
  {text: 'Cookie Monster is hangry'},
  {text: 'a hipster combs his moustache'},
  {text: 'plane flies under reading rainbow'},
  {text: 'cry me a river of pepsi'},
  {text: 'ninja slips on banana peel'},
  {text: 'sad blue donkey'},
  {text: 'wizard uses magic math'},
  {text: 'birds on roller coaster'},
  {text: 'cavern of doom'},
  {text: 'genie in a bottle'},
  {text: 'Big Bird waves hello'},
  {text: 'really sweaty dancing'},
  {text: 'Superman flies over city'},
  {text: 'Kool-Aid man breaks the wall'},
  {text: 'bathroom break'},
  {text: 'potty training'},
  {text: 'old wise man in the woods'},
  {text: 'orange monster wears a mop'},
  {text: 'surfing in a chocolate ocean'},
  {text: 'hippo goes shopping'},
  {text: 'businessman eats sandwich'},
  {text: 'Peter Piper picked a peck of pickled peppers'},
  {text: 'Jack and the beanstalk'},
  {text: 'purple conch shell'},
  {text: 'happy little starfish'},
  {text: 'robot cannot compute'},
  {text: 'school of fish'},
  {text: 'tension rising'},
  {text: 'leprechaun cannot find his gold'},
  {text: 'ladybug sings Lady Gaga song'},
  {text: 'waterfall of Skittles'},
  {text: 'soaking in the sunlight'},
  {text: 'relax and breathe'},
  {text: 'Mary had a little lamb'},
  {text: 'woodchuck chucks wood'},
  {text: 'the gorilla is pleased'},
  {text: 'juicy double hamburger'},
  {text: 'girl on a cookie quest'},
  {text: 'kitten rolling in yarn'},
  {text: 'pizza cat house ball'},
  {text: 'rolling down the river'},
  {text: 'monkey carrot slipper'},
  {text: 'laugh til you cry'},
  {text: 'bodybuilder needs protein'},
  {text: 'really bad haircut'},
  {text: 'this is fine'},
  {text: 'my spoon is too big'},
  {text: 'paper airplane following me'},
  {text: 'the clock is crooked'},
  {text: 'tea time'},
  {text: 'roll on the floor laughing'},
  {text: 'delicious tacos'},
  {text: 'pizza on a stick'},
  {text: 'giraffe with excessively long neck'},
  {text: 'mermaid discovers fork'},
  {text: 'falling asleep in history class'},
  {text: 'mushroom-flavored cookies'},
  {text: 'the caterpiller is smoking a cigar'},
  {text: 'riding a bicycle'},
  {text: 'dog distracted by shiny thing'},
  {text: 'squirrel runs around the lake'},
  {text: 'Batman and Yoda'},
  {text: 'give the horse a sugar cube'},
  {text: 'liar liar pants on fire'},
  {text: 'Pinocchio lies too much'},
  {text: 'inventing the wheel'},
  {text: 'man discovers fire'},
  {text: 'god of the sun'},
  {text: 'Hercules'},
  {text: 'SpongeBob Squarepants out of water'},
  {text: 'trying to be cool even though you farted'},
  {text: 'making a fruit smoothie'},
  {text: 'nun bus'},
  {text: 'cooking in space'},
  {text: 'tooth fairy needs cash'},
  {text: 'walking on sunshine'},
  {text: 'pirahna dinner'},
  {text: 'skip to the barn'},
  {text: 'won the race by a nose'},
  {text: 'Harry Potter forgot his wand'},
  {text: 'an egg that does not want to be cooked'},
  {text: 'pen pineapple apple pen'},
  {text: 'skydiving for the first time'},
  {text: 'it is fun to stay at the YMCA'},
  {text: 'electric eel shocks himself'},
  {text: 'raindance in the desert'},
  {text: 'popcorn for dinner'},
  {text: 'blender and an orange'},
  {text: 'triathlete'},
  {text: 'hiccups during a speech'},
  {text: 'pantless armadillo'},
  {text: 'blueberry girl'},
  {text: 'nightmare cockroaches'},
  {text: 'lion sees his reflection for the first time'},
  {text: 'baby tastes a lemon'},
  {text: 'soccer-football mashup'},
  {text: 'sleepy violinist'},
], phrase => db.model('phrases').create(phrase));

db.didSync
  .then(() => db.sync({force: true}))
  .then(() => Promise.all([seedUsers(), seedPhrases()]))
  .then(() => {
    console.log('Data seeded successfully');
  })
  .catch(error => console.error(error))
  .finally(() => db.close());
